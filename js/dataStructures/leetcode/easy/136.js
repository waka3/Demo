/*
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 * 说明：
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 * 示例 1:
 * 输入: [2,2,1]
 * 输出: 1
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/single-number
 */
/**
 * 方法一：运行速度过低，因为循环多次
 * @param {number[]} nums
 * @return {number}
 */
 var singleNumber = function (nums) {
  for (let i = 0; i < nums.length; i++){
    if (nums.indexOf(nums[i]) === nums.lastIndexOf(nums[i])) {
      return nums[i]
    }
  }
};

/**
 * 方法二：异或 -> 每一个对应的位，两个不相同则返回1，相同则返回0.
 * @param {*} nums 
 * @returns 
 */
var singleNumber = function (nums) {
  const n = nums.length;
  let result = nums[0];
  for (let i = 1; i < n; ++i){
    result ^= nums[i];
  }
  return result;
};

console.log(singleNumber([2,2,1]))
console.log(singleNumber([4, 1, 2, 1, 2]))
console.log(singleNumber([463,191,-915,-438,420,-135,-431,611,695,-605,469,917,301,70,209,-66,956,7,245,147,104,633,-218,-879,-894,208,-37,-344,-252,-684,728,-943,858,-557,217,-655,-91,-308,699,-152,-702,916,-867,447,29,-207,56,-149,909,980,508,-747,-389,-718,814,-790,803,299,443,932,-814,495,274,88,-22,373,-324,144,-144,421,-499,-178,-582,-124,741,526,215,-538,-912,400,425,-693,-767,862,-746,462,762,148,463,191,-915,-438,420,-135,-431,611,695,-605,469,917,301,70,209,-66,956,7,245,147,104,633,-218,-879,-894,208,-37,-344,-252,-684,728,-943,858,-557,217,-655,-91,-308,699,-152,-702,916,-867,447,29,-207,56,-149,909,980,508,-747,-389,-718,814,-790,803,299,443,932,-814,495,274,88,-22,373,-324,144,-144,421,-499,-178,-582,-124,741,526,215,-538,-912,400,425,-693,-767,862,-746,462,762,148,-3]))